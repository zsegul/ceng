#include "the3.h"

// DO NOT CHANGE ABOVE THIS LINE!
// you may implement helper functions below

int min_of_five(int a, int b, int c, int d, int e) {
    int min_val = a;
    if (b < min_val) min_val = b;
    if (c < min_val) min_val = c;
    if (d < min_val) min_val = d;
    if (e < min_val) min_val = e;
    return min_val;
}

int min_of_four(int a, int b, int c, int d) {
    int min_val = a;
    if (b < min_val) min_val = b;
    if (c < min_val) min_val = c;
    if (d < min_val) min_val = d;
    return min_val;
}

int find_min_cost(const std::vector<std::vector<int>>& costs, int N){

    int min_cost = 0;
    // your code here
    std::vector<std::vector<int>> dp(N - 1, std::vector<int>(6, 100000000)); // Use large initial values

    for (int j = 0; j < 6; ++j) {
        dp[0][j] = costs[0][j];
    }

    for (int i = 1; i < N - 1; ++i) {
        dp[i][0] = min_of_five(dp[i-1][0], dp[i-1][2], dp[i-1][3], dp[i-1][4], dp[i-1][5]) + costs[i][0];
        dp[i][1] = min_of_five(dp[i-1][1], dp[i-1][2], dp[i-1][3], dp[i-1][4], dp[i-1][5]) + costs[i][1];
        
        dp[i][2] = min_of_four(dp[i-1][0], dp[i-1][1], dp[i-1][4], dp[i-1][5]) + costs[i][2];
        dp[i][3] = min_of_four(dp[i-1][0], dp[i-1][1], dp[i-1][4], dp[i-1][5]) + costs[i][3];

        dp[i][4] = min_of_four(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3]) + costs[i][4];
        dp[i][5] = min_of_four(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3]) + costs[i][5];
        

    }

    min_cost = dp[N - 2][0];
    for (int j = 1; j < 6; ++j) {
        if (dp[N - 2][j] < min_cost) {
            min_cost = dp[N - 2][j];
        }
    }

    // do not forget to update the return value!
    return min_cost;
}
