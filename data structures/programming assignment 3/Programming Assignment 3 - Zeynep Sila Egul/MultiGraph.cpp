#include "MultiGraph.h"
#include "Exceptions.h"
#include "IntPair.h"
#include <iostream>
#include <iomanip>
#include <fstream>

//=======================//
// Implemented Functions //
//=======================//
MultiGraph::MultiGraph()
{}

MultiGraph::MultiGraph(const std::string& filePath)
{
    // ============================= //
    // This function is implemented  //
    // Do not edit this function !   //
    // ============================= //
    // Tokens
    std::string tokens[5];
    std::ifstream mapFile(filePath.c_str());

    if(!mapFile.is_open())
    {
        std::cout << "Unable to open " << filePath << std::endl;
        return;
    }

    // Read line by line
    std::string line;
    while (std::getline(mapFile, line))
    {
        // Empty Line Skip
        if(line.empty()) continue;
        // Comment Skip
        if(line[0] == '#') continue;

        // Tokenize the line
        int i = 0;
        std::istringstream stream(line);
        while(stream >> tokens[i]) i++;

        // Single token (Meaning it is a vertex)
        if(i == 1)
        {
            InsertVertex(tokens[0]);
        }
        // Exactly 5 tokens (Meaning it is an edge)
        else if(i == 5)
        {
            // Rename vars for readablity
            const std::string& vertexFromName = tokens[0];
            const std::string& vertexToName = tokens[1];
            const std::string& edgeName = tokens[2];
            float weight0 = static_cast<float>(std::atof(tokens[3].c_str()));
            float weight1 = static_cast<float>(std::atof(tokens[4].c_str()));
            AddEdge(edgeName, vertexFromName, vertexToName,
                    weight0, weight1);
        }
        else std::cerr << "Token Size Mismatch" << std::endl;
    }
}

void MultiGraph::PrintPath(const std::vector<int>& orderedVertexEdgeIndexList,
                           float heuristicWeight,
                           bool sameLine) const
{
    // ============================= //
    // This function is implemented  //
    // Do not edit this file !       //
    // ============================= //

    // Name is too long
    const std::vector<int>& ove = orderedVertexEdgeIndexList;
    // Invalid list
    // At least three items should be available
    if(ove.size() < 3) return;

    // Check vertex and an edge
    for(size_t i = 0; i < orderedVertexEdgeIndexList.size(); i += 2)
    {
        int vertexId = ove[i];
        if(vertexId >= static_cast<int>(vertexList.size()))
        {
            // Return if there is a bad vertex id
            std::cout << "VertexId " << vertexId
                      << " not found!" << std::endl;
            return;
        }


        const GraphVertex& vertex = vertexList[vertexId];
        std::cout << vertex.name;
        if(!sameLine) std::cout << "\n";
        // Only find and print the weight if next is available
        if(i == ove.size() - 1) break;
        int nextVertexId = ove[i + 2];
        if(nextVertexId >= static_cast<int>(vertexList.size()))
        {
            // Return if there is a bad vertex id
            std::cout << "VertexId " << vertexId
                    << " not found!" << std::endl;
            return;
        }

        // Find the edge between these two vertices
        int localEdgeId = ove[i + 1];
        if(localEdgeId >= static_cast<int>(vertex.edges.size()))
        {
            // Return if there is a bad vertex id
            std::cout << "EdgeId " << localEdgeId
                      << " not found in " << vertexId << "!" << std::endl;
            return;
        }

        const GraphEdge& edge = vertex.edges[localEdgeId];

        // Combine with heuristic (linear interpolation)
        float weight = Lerp(edge.weight[0], edge.weight[1],
                            heuristicWeight);

        std::cout << "-" << std::setfill('-')
                  << std::setw(4)
                  << weight << "->";
    }
    // Print endline on the last vertex if same line is set
    if(sameLine) std::cout << "\n";
    // Reset fill value because it "sticks" to the std out
    std::cout << std::setfill(' ');
    std::cout.flush();
}

void MultiGraph::PrintEntireGraph() const
{
    // ============================= //
    // This function is implemented  //
    // Do not edit this function !   //
    // ============================= //
    for(size_t i = 0; i < vertexList.size(); i++)
    {
        const GraphVertex& v = vertexList[i];
        std::cout << v.name << "\n";
        for(size_t j = 0; j < v.edges.size(); j++)
        {
            const GraphEdge& edge = v.edges[j];

            // List the all vertex names and weight
            std::cout << "    -"
                      << std::setfill('-')
                      << std::setw(4) << edge.weight[0]
                      << "-"
                      << std::setw(4) << edge.weight[1]
                      << "-> ";
            std::cout << vertexList[edge.endVertexIndex].name;
            std::cout << " (" << edge.name << ")" << "\n";
        }
    }
    // Reset fill value because it "sticks" to the std out
    std::cout << std::setfill(' ');
    std::cout.flush();
}

//=======================//
//          TODO         //
//=======================//
float MultiGraph::Lerp(float w0, float w1, float alpha)
{
    /* TODO */
    float beta = w0*(1-alpha) + w1*(alpha);
    return beta;
}

void MultiGraph::InsertVertex(const std::string& vertexName)
{
    /* TODO */;
    for(size_t i = 0; i<vertexList.size(); i++){
        if(vertexList[i].name == vertexName) throw DuplicateVertexException(vertexName);
    }
    GraphVertex add;
    add.name = vertexName;
    vertexList.push_back(add);
}

void MultiGraph::RemoveVertex(const std::string& vertexName)
{
    /* TODO */
    bool find = false;
    for(size_t i = 0; i<vertexList.size(); i++){
        if(vertexList[i].name == vertexName) {
            find = true;
            vertexList.erase(vertexList.begin()+i);
            break;
        }
    }
    if(find == false) throw VertexNotFoundException(vertexName);
}

void MultiGraph::AddEdge(const std::string& edgeName,
                         const std::string& vertexFromName,
                         const std::string& vertexToName,
                         float weight0, float weight1)
{
    /* TODO */
    int from, to;
    bool findFrom = false, findTo = false;
    for(size_t i=0; i<vertexList.size(); i++){
        if(vertexList[i].name == vertexFromName) {
            from = i;
            findFrom = true;
        }
        if(vertexList[i].name == vertexToName){
            to = i;
            findTo = true;
        }
    }
    if(findTo == false) throw VertexNotFoundException(vertexToName);
    
    if(findFrom == false) throw VertexNotFoundException(vertexFromName);
    
    for(size_t i=0; i<vertexList[from].edges.size();i++){
        if(vertexList[from].edges[i].endVertexIndex == to && vertexList[from].edges[i].name == edgeName) {
            throw SameNamedEdgeException(edgeName, vertexFromName, vertexToName);
        } 
    }
    
    GraphEdge edge;
    edge.name = edgeName;
    edge.weight[0] = weight0;
    edge.weight[1] = weight1;
    edge.endVertexIndex = to;
    vertexList[from].edges.push_back(edge);
}

void MultiGraph::RemoveEdge(const std::string& edgeName,
                            const std::string& vertexFromName,
                            const std::string& vertexToName)
{
    /* TODO */
    int from, to;
    bool findFrom = false, findTo = false, findEdge = false;
    for(size_t i=0; i<vertexList.size(); i++){
        if(vertexList[i].name == vertexFromName) {
            from = i;
            findFrom = true;
        }
        if(vertexList[i].name == vertexToName){
            to = i;
            findTo = true;
        }
    }
    if(findTo == false) {
        throw VertexNotFoundException(vertexToName);
        throw EdgeNotFoundException(vertexToName,edgeName);
    }
    if(findFrom == false) {
        throw VertexNotFoundException(vertexFromName);
        throw EdgeNotFoundException(vertexFromName, edgeName);
    }
    
    for(size_t i=0; i<vertexList[from].edges.size();i++){
        if(vertexList[from].edges[i].endVertexIndex == to && vertexList[from].edges[i].name == edgeName) {
           findEdge = true;
           vertexList[from].edges.erase(vertexList[from].edges.begin() + i);
        } 
    }
    
    if(findEdge == false) throw  EdgeNotFoundException(vertexFromName, edgeName);
    
    
}

bool MultiGraph::HeuristicShortestPath(std::vector<int>& orderedVertexEdgeIndexList,
                                       const std::string& vertexNameFrom,
                                       const std::string& vertexNameTo,
                                       float heuristicWeight) const
{
    /* TODO */
    int fromIndex = -1, toIndex = -1;

    for (size_t i = 0; i < vertexList.size(); i++) {
        if (vertexList[i].name == vertexNameFrom) {
            fromIndex = i;
        }
        if (vertexList[i].name == vertexNameTo) {
            toIndex = i;
        }
    }

    if (fromIndex == -1) {
        throw VertexNotFoundException(vertexNameFrom);
    }
    
    if(toIndex == -1) {
        throw VertexNotFoundException(vertexNameTo);
    }

    MinPairHeap<float, int> pq;
    std::vector<float> distance(vertexList.size(), INFINITY_VALUE);
    std::vector<int> prev(vertexList.size(), -1);
    std::vector<int> currEdge(vertexList.size(), -1);

    distance[fromIndex] = 0.0;

    pq.push({0.0, fromIndex});

    while (!pq.empty()) {
        int u = pq.top().value;
        pq.pop();

        for (size_t i = 0; i < vertexList[u].edges.size(); i++) {
            const GraphEdge& edge = vertexList[u].edges[i];
            int v = edge.endVertexIndex;

            float weight = Lerp(edge.weight[0], edge.weight[1], heuristicWeight);

            if (distance[v] > distance[u] + weight) {
                distance[v] = distance[u] + weight;
                prev[v] = u; 
                currEdge[v] = i;
                pq.push({distance[v], v});
            }
        }
    }

    if(distance[toIndex] == INFINITY_VALUE) return false;
    
    if(prev[toIndex] == -1) return false;
    
    orderedVertexEdgeIndexList.clear();

    int current = toIndex;
    while (current != -1) {
        orderedVertexEdgeIndexList.insert(orderedVertexEdgeIndexList.begin(), current);
        if (prev[current] != -1) {
            orderedVertexEdgeIndexList.insert(orderedVertexEdgeIndexList.begin(), currEdge[current]);
            current = prev[current]; 
        } else {
            break; 
        }
    }
    return true;
    
  
}

bool MultiGraph::FilteredShortestPath(std::vector<int>& orderedVertexEdgeIndexList,
                                      const std::string& vertexNameFrom,
                                      const std::string& vertexNameTo,
                                      float heuristicWeight,
                                      const std::vector<std::string>& edgeNames) const
{
    /* TODO */
    int fromIndex = -1, toIndex = -1;

    for (size_t i = 0; i < vertexList.size(); i++) {
        if (vertexList[i].name == vertexNameFrom) {
            fromIndex = i;
        }
        if (vertexList[i].name == vertexNameTo) {
            toIndex = i;
        }
    }

    if (fromIndex == -1) {
        throw VertexNotFoundException(vertexNameFrom);
    }
    
    if(toIndex == -1) {
        throw VertexNotFoundException(vertexNameTo);
    }


    std::vector<float> distance(vertexList.size(), INFINITY_VALUE);
    std::vector<int> prev(vertexList.size(), -1);
    std::vector<int> currEdge(vertexList.size(), -1);

    distance[fromIndex] = 0;

    MinPairHeap<float, int> pq;
    pq.push({0.0, fromIndex});

    while (!pq.empty()) {
        int u = pq.top().value;
        pq.pop();

        for (size_t i = 0; i < vertexList[u].edges.size(); i++) {
            const GraphEdge& edge = vertexList[u].edges[i];
            int v = edge.endVertexIndex;

            // Check if the edge name is in the filtered list
            bool edgeFound = false;
            for (size_t j = 0; j<edgeNames.size(); j++) {
                if (edge.name == edgeNames[i]) {
                    edgeFound = true;
                    break;
                }
            }

            if (edgeFound) {
                continue; 
            }

            float weight = Lerp(edge.weight[0], edge.weight[1], heuristicWeight);

            if (distance[v] > distance[u] + weight) {
                distance[v] = distance[u] + weight;
                prev[v] = u;
                currEdge[v] = i;
                pq.push({distance[v], v});
            } else if (distance[v] == distance[u] + weight) {
                currEdge[v] = u;
            }
        }
    }

    if(distance[toIndex] == INFINITY_VALUE) return false;
    
    if(prev[toIndex] == -1) return false;
    
    orderedVertexEdgeIndexList.clear();
    
    int current = toIndex;
    while (current != -1) {
        orderedVertexEdgeIndexList.insert(orderedVertexEdgeIndexList.begin(), current);
        if (prev[current] != -1) {
            orderedVertexEdgeIndexList.insert(orderedVertexEdgeIndexList.begin(), currEdge[current]);
            current = prev[current]; 
        } else {
            break; 
        }
    }
    return true;
}

int MultiGraph::BiDirectionalEdgeCount() const
{
    /* TODO */
    int bi = 0, to = -1;
    for(size_t i =0; i<vertexList.size(); i++){
        for(size_t j = 0; j<vertexList[i].edges.size(); j++){
            to = vertexList[i].edges[j].endVertexIndex;
            for(size_t k=0; k<vertexList[to].edges.size(); k++){
                if(vertexList[to].edges[k].endVertexIndex == i && vertexList[to].edges[k].name == vertexList[i].edges[j].name && to != i) {
                    bi++;
                    break;
                }
            }
        }
    }
    
    return bi/2;
}

void MultiGraph::findMaxDepth(int currentIndex, int depth, int& lastDepth, const std::string& edgeName) const {
    if (depth > lastDepth) {
        lastDepth = depth;
    }
    for(size_t i = 0; i<vertexList[currentIndex].edges.size(); i++){
        if(vertexList[currentIndex].edges[i].name == edgeName) {
            findMaxDepth(vertexList[currentIndex].edges[i].endVertexIndex, depth+1, lastDepth, edgeName);
        }
    }
}

int MultiGraph::MaxDepthViaEdgeName(const std::string& vertexName,
                                    const std::string& edgeName) const
{
    /* TODO */
    int depth = 0, from = -1;
    
    for(size_t i = 0; i<vertexList.size(); i++){
        if(vertexList[i].name == vertexName) {
            from = i;
            break;
        }
    }
    
    if(from == -1) throw VertexNotFoundException(vertexName);
    
    findMaxDepth(from, 0, depth, edgeName);
    
    return depth;
}

GraphEdge MultiGraph::getEdgeDetails(const std::string& edgeName, const std::string& vertexFromName, const std::string& vertexToName) {
    int from = -1, to = -1;
    for(size_t i=0; i<vertexList.size(); i++){
        if(vertexList[i].name == vertexFromName) {
            from = i;
        }
        if(vertexList[i].name == vertexToName){
            to = i;
        }
    }
    if(from != -1 && to != -1) return vertexList[from].edges[to];
    else throw EdgeNotFoundException(vertexFromName,edgeName);
}

bool MultiGraph::edgeExists(const std::string& edgeName, const std::string& vertexFromName, const std::string& vertexToName) {
    int from = -1, to = -1;
    for(size_t i=0; i<vertexList.size(); i++){
        if(vertexList[i].name == vertexFromName) {
            from = i;
        }
        if(vertexList[i].name == vertexToName){
            to = i;
        }
    }
    if(from != -1 && to != -1){
        for(size_t j = 0; j<vertexList[from].edges.size(); j++){
            if(vertexList[from].edges[j].endVertexIndex == to && vertexList[from].edges[j].name == edgeName) return true;
        }
    }
    return false;
}

int MultiGraph::GetVertexIndex(const std::string& vertexName) const {
    for (size_t i = 0; i < vertexList.size(); i++) {
        if (vertexList[i].name == vertexName) {
            return i;
        }
    }
    return -1;
}